#include <Arduino.h>
#include <driver/i2s.h>
// Define the pins used for I2S interface on ESP32-WROOM

#define I2S_MIC_BCK_PIN  18 // Bit Clock (BCK) pin

#define I2S_MIC_WS_PIN   25 // Word Select (WS) pin

#define I2S_MIC_DATA_PIN 21 // Data Out (SD) pin

 

void setup() {

  Serial.begin(115200);

 

  // Configure I2S interface

  i2s_config_t i2sConfig = {

    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),

    .sample_rate = 48000, // Replace with the desired sampling rate (e.g., 48000, 44100, etc.)

    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,

    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,

    .communication_format = I2S_COMM_FORMAT_I2S_MSB,

    .intr_alloc_flags = 0,

    .dma_buf_count = 8,

    .dma_buf_len = 64,

    .use_apll = false

  };

 

  i2s_pin_config_t pinConfig = {

    .bck_io_num = I2S_MIC_BCK_PIN,

    .ws_io_num = I2S_MIC_WS_PIN,

    .data_out_num = I2S_PIN_NO_CHANGE,

    .data_in_num = I2S_MIC_DATA_PIN

  };

 

  i2s_driver_install(I2S_NUM_0, &i2sConfig, 0, NULL);

  i2s_set_pin(I2S_NUM_0, &pinConfig);

}

 

void loop() {

  int16_t buffer[64]; // Buffer to store the audio data

  size_t bytesRead;

 

  // Read audio data from the I2S interface

  i2s_read(I2S_NUM_0, (void*)buffer, sizeof(buffer), &bytesRead, portMAX_DELAY);

 

  // Process the audio data as needed (e.g., send to server, perform audio analysis, etc.)

  // Your code to process the audio data goes here...

 

  // Optional: Print the audio data for debugging purposes

  for (size_t i = 0; i < bytesRead / sizeof(int16_t); i++) {

    Serial.print(buffer[i]);

    Serial.print(" ");

  }

  Serial.println();

}

 